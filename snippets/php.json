{
    "sessionClienteId": {
        "prefix": "okphp8sessionclienteid",
        "body": [
            "\\$_SESSION['okentrega']['acesso']['cliente_id']"
        ],
        "description": "Captura o valor do CLIENTE_ID da sessão."
    },
    "sessionUserId": {
        "prefix": "okphp8sessionuserid",
        "body": [
            "\\$_SESSION['okentrega']['acesso']['user_id']"
        ],
        "description": "Captura o valor do USER_ID da sessão."
    },
    "sessionToken": {
        "prefix": "okphp8sessiontoken",
        "body": [
            "\\$_SESSION['okentrega']['acesso']['token']"
        ],
        "description": "Captura o valor do TOKEN da sessão."
    },
    "devPrint": {
        "prefix": "okphp8printdev",
        "body": [
            "if (\\$_SESSION['okentrega']['acesso']['user_id'] == ${9999:okDevUserId}) {",
            "\tprint_r(${2:message});",
            "\tdie();",
            "}"
        ],
        "description": "print_r + if de usuário DESENVOLVIMENTO"
    },
    "hmlPrint": {
        "prefix": "okphp8printhml",
        "body": [
            "if (\\$_SESSION['okentrega']['acesso']['user_id'] == ${9999:okHmlUserId}) {",
            "\tprint_r(${2:message});",
            "\tdie();",
            "}"
        ],
        "description": "print_r + if de usuário HOMOLOGAÇÃO"
    },
    "prodPrint": {
        "prefix": "okphp8printprod",
        "body": [
            "if (\\$_SESSION['okentrega']['acesso']['user_id'] == ${9999:okProdUserId}) {",
            "\tprint_r(${2:message});",
            "\tdie();",
            "}"
        ],
        "description": "print_r + if de usuário PRODUÇÃO"
    },
    "tryCatchFinally": {
        "prefix": "okphp8trycatchfinally",
        "body": [
            "try {",
            "",
            "} catch (\\\\Exception \\$e) {",
            "\t\\$trace = \\$this->retorno['resposta_status']['files_error'];",
            "\t\\$this->retorno = (new Retorno())->erro_retornofuncao(",
            "\t\tline: \\$e->getLine(),",
            "\t\tmsg: \\$e->getMessage(),",
            "\t\terro_code: null,",
            "\t\tstatus: \\$e->getCode(),",
            "\t\ttrace: count(\\$trace) > 0 ? \\$trace : [__CLASS__ => ['function' => __FUNCTION__, 'file' => __FILE__]]",
            "\t);",
            "} finally {",
            "\t\\$this->retorno['resposta_status']['time'] = microtime(true) - \\$this->retorno['resposta_status']['time'];",
            "}",
            "return \\$this->retorno;"
        ],
        "description": "try catch finally default"
    },
    "okGetHostName": {
        "prefix": "okphp8gethostname",
        "body": [
            "\\$host = '';",
            "",
            "\\$host->getAcronymServerName() : string",
            "// 'DEV' || 'HML' || 'PROD'",
            "",
            "\\$host->getBaseUrl($acronym = '') : string",
            "// - Retorna a base url : ",
            "// - http://oks-s-dev.stil",
            "// - https://hml.okentrega.com.br",
            "// - https://www.okentrega.com.br"
        ],
        "description": "Diferencia a variável de URL pelo hostname do servidor."
    },
    "okInitReturn": {
        "prefix": "okphp8initretorno",
        "body": [
            "\\$this->retorno = (new Retorno())->iniciar_retornofuncao();"
        ],
        "description": "Diferencia a variável de URL pelo hostname do servidor."
    },
    "okMiddleware": {
        "prefix": "okphp8middleware",
        "body": [
            "include_once(Middleware.php);",
            "",
            "\\$middleware = new Middleware();",
            "",
            "// \\${1} - Constante ou diretório até o arquivo",
            "// \\${2} - Nome do arquivo + extensão",
            "// \\${3} - Nome da Classe",
            "// \\${4} - Nome da Função",
            "// \\${5} - ['constructor' => [] 'function' => []] -- Parâmetro em ordem, do constructor ou da função",
            "",
            "\\$response = \\$middleware->handle('${1:Constante ou diretório até o arquivo}@${2:Nome do arquivo + extensão}', '${3:Nome da Classe}@${4:Nome da Função}', ${5:['constructor' => [] 'function' => []]});",
            "",
            "\\$retorno = [];",
            "if (\\$response['resposta_status']['status'] == 1) {",
            "\t\\$retorno = \\$response['resposta_dados']['curl_json'];",
            "}"
        ],
        "description": "Diferencia a variável de URL pelo hostname do servidor."
    },
    "okInitClass": {
        "prefix": "okphp8initclass",
        "body": [
            "if (!isset(\\$_SESSION)) {",
            "\tsession_start();",
            "}",
            "",
            "include_once(dirname(__DIR__, 1) . '/system/obj/bootstrap.php8');",
            "include_once(dirname(__DIR__, 1) . '/system/sys.callproc.php8');",
            "include_once(SYSTEM . 'sys.access.control.php8');",
            "",
            "include_once(\\$_SESSION['okentrega']['path']['system'].'sys.access.control.php8');",
            "",
            "class regfilavalidacao extends sys_accesscontrol",
            "{",
            "",
            "\tpublic \\$retorno = [];",
            "\tpublic \\$token = '';",
            "\tpublic function __construct()",
            "\t{",
            "\t\tparent::__construct();",
            "\t\t\\$this->retorno = (new Retorno())->iniciar_retornofuncao();",
            "\t\t\\$this->token = \\$_SESSION['okentrega']['acesso']['token'];",
            "\t}",
            "}"
        ],
        "description": "Diferencia a variável de URL pelo hostname do servidor."
    },
    "okQuery": {
        "prefix": "okphp8query",
        "body": [
            "\\$sql${sqlvariable} = '${2:sqlstring}';",
            "",
            "\\$query${sqlvariable} = (new Query())->query(\\$sql${sqlvariable});",
            "",
            "if (\\$query${sqlvariable}['resposta_status']['status'] == 0) {",
            "\tthrow new Exception(\\$query${sqlvariable}['resposta_status']['msg']);",
            "}"
        ],
        "description": "Diferencia a variável de URL pelo hostname do servidor."
    },
    "okGetRealm": {
        "prefix": "okphp8getrealm",
        "body": [
            "\\$getrealm = parent::getRealm(\\$_SESSION['okentrega']['acesso']['user_id']);",
            "",
            "if(\\$getrealm['resposta_status']['status'] != 1) {",
            "",
            "\t\\$retorno = \\$this->erro_retornofuncao(__LINE__, 'Erro ao buscar informações do usuário');",
            "}"
        ],
        "description": "Trecho de código para resgatar o tipo de acesso do usuário."
    },
    "createFunction": {
        "prefix": "okphp8function",
        "body": [
            "${1:public | protected | private} function ${2:nameFunction}()",
            "{",
            "\ttry {",
            "\t\t",
            "\t} catch (\\\\Exception \\$e) {",
            "\t\t\\$trace = \\$this->retorno['resposta_status']['files_error'];",
            "\t\t\\$this->retorno = (new Retorno())->erro_retornofuncao(",
            "\t\t\tline: \\$e->getLine(),",
            "\t\t\tmsg: \\$e->getMessage(),",
            "\t\t\terro_code: null,",
            "\t\t\tstatus: \\$e->getCode(),",
            "\t\t\ttrace: count(\\$trace) > 0 ? \\$trace : [__CLASS__ => ['function' => __FUNCTION__, 'file' => __FILE__]]",
            "\t\t);",
            "\t} finally {",
            "\t\t\\$this->retorno['resposta_status']['time'] = microtime(true) - \\$this->retorno['resposta_status']['time'];",
            "\t}",
            "\treturn \\$this->retorno;",
            "}"
        ],
        "description": "create function default"
    },
    "ifThrow": {
        "prefix": "okphp8throw",
        "body": [
            "if (${1:condition}) {",
            "\tthrow new Exception(${2:message});",
            "}"
        ],
        "description": "'if throw' facilitated"
    }
}